#  Phusion Passenger - https://www.phusionpassenger.com/
#  Copyright (c) 2013 Phusion
#
#  "Phusion Passenger" is a trademark of Hongli Lai & Ninh Bui.
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in
#  all copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
#  THE SOFTWARE.

# Nginx config file parser. Used internally by NginxConfigReader.

grammar NginxConfigFile
  rule start
    (space / comment / directive / block)*
    {
      def to_data
        elements.map do |element|
          element.to_data if element.respond_to?(:to_data)
        end.compact
      end
    }
  end

  rule directive
    non_quoted_string parameters maybe_space ";"
    {
      def to_data
        [:directive, non_quoted_string.text_value, *parameters.text_values]
      end
    }
  end

  rule block
    non_quoted_string parameters maybe_space "{" start "}"
    {
      def to_data
        [:block, non_quoted_string.text_value, *parameters.text_values, start.to_data]
      end
    }
  end


  rule parameters
    (parameter)*
    {
      def text_values
        elements.map { |x| x.text_value }
      end
    }
  end

  rule parameter
    space value
    {
      def text_value
        value.text_value
      end
    }
  end


  rule value
    quoted_string / non_quoted_string
  end

  rule quoted_string
    single_quoted_string / double_quoted_string
  end

  rule single_quoted_string
    "'" letters:(!"'" .)* "'"
    {
      def text_value
        letters.text_value
      end
    }
  end

  rule double_quoted_string
    '"' letters:(!'"' double_quoted_string_letter)* '"'
    {
      def text_value
        letters.elements.map{ |el| el.elements.last.text_value }.join
      end
    }
  end

  rule double_quoted_string_letter
    '\\' char:["nt]
    {
      def text_value
        case char.text_value
        when '"'; '"'
        when 'n'; "\n"
        when 't'; "\t"
        end
      end
    }
    /
    .
  end

  rule non_quoted_string
    (!(space_chars / "#" / ";" / "{" / "}") .)+
  end


  rule maybe_space
    space_chars*
  end

  rule space
    space_chars+
  end

  rule space_chars
    [ \t\r\n]
  end

  rule comment
    "#" (!"\n" .)* "\n"?
  end
end
